<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Andryo Marzuki</title>
    <link>https://marzukia.github.io/post/</link>
    <description>Recent content in Posts on Andryo Marzuki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â© 2020, Andryo Marzuki</copyright>
    <lastBuildDate>Thu, 18 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://marzukia.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mocking DbContext in ASP.NET Core for xUnit Tests</title>
      <link>https://marzukia.github.io/post/mocking-dbcontext-tests-aspnet/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marzukia.github.io/post/mocking-dbcontext-tests-aspnet/</guid>
      <description>Are you Mocking me? Having unit tests in your application is important to ensure that your application functions how you intend for it to function. This is especially important as the scope and complexity of your application increases in size.
My starting point was this MSDN article discussing how to use xUnit with ASP.NET Core. The example itself is quite bare in my opinion, it doesn&amp;rsquo;t actually provide any real useful examples on how to implement xUnit with your application&amp;rsquo;s DbContext.</description>
    </item>
    
    <item>
      <title>Using Fetch over Axios in ReactJS Applications</title>
      <link>https://marzukia.github.io/post/frontend-resuable-api/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marzukia.github.io/post/frontend-resuable-api/</guid>
      <description>Go Fetch! For my last few projects I&amp;rsquo;ve made the switch from Axios to plain ol&amp;rsquo; Fetch. My rationale for making this switch was:
 Axios is a third party library. Where possible I would like to reduce usage of third party libraries; and Fetch is a perfectly capable library for the purposes of building my resuable API class with.  My approach in using Fetch or Axios is to create a class which contains all my API logic.</description>
    </item>
    
    <item>
      <title>ASP.NET Core Web API JWT Implementation</title>
      <link>https://marzukia.github.io/post/aspnet-jwt-webapi/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marzukia.github.io/post/aspnet-jwt-webapi/</guid>
      <description>Can I See Some Identification? I&amp;rsquo;ve recently made the jump from using Django to ASP.NET Core as my primary choice when developing web applications. This was initially due to me branching into using C# for things like Unity, and later realizing how much better ASP.NET Core is than Django.
As I mostly use ReactJS for my application frontends, I did not need the &amp;lsquo;Razor&amp;rsquo; pages integrated in ASP.NET. As a result, my preference was to bootstrap my projects as webapi rather than webapp or even mvc.</description>
    </item>
    
    <item>
      <title>Fedora 32 and GPU Passthrough (VFIO)</title>
      <link>https://marzukia.github.io/post/fedora32-vfio/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marzukia.github.io/post/fedora32-vfio/</guid>
      <description>&amp;hellip;What? I&amp;rsquo;ve used Fedora 32 as my main OS for about two years. Overall, it has been a very pleasant experience and has made things such as developing much easier than it would&amp;rsquo;ve been on Windows.
However&amp;hellip; gaming on Linux is frankly a pain in the ass. No matter the state of Vulkan, Proton, Wine, etc, you&amp;rsquo;ll always find Windows games which will flat out not work. More recently, I found that Escape From Tarkov did not work at all on Linux due to Easy Anticheat.</description>
    </item>
    
  </channel>
</rss>