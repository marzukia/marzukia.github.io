
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Typescript on Andryo Marzuki</title>
   <link>https://marzukia.github.io/tags/typescript/</link>
   <description>Recent content in Typescript on Andryo Marzuki</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Â© 2020, Andryo Marzuki</copyright>
   <lastBuildDate>Wed, 17 Jun 2020 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://marzukia.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Mocking DbContext in ASP.NET Core for xUnit Tests</title>
       <link>https://marzukia.github.io/posts/mocking-dbcontext-tests-aspnet/</link>
       <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://marzukia.github.io/posts/mocking-dbcontext-tests-aspnet/</guid>
       <description>&lt;p&gt;Having unit tests in your application is important to ensure that your application functions how you intend for it to function. This is especially important as the scope and complexity of your application increases in size.&lt;/p&gt;
&lt;p&gt;My starting point was this &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-dotnet-test&#34;&gt;MSDN article&lt;/a&gt; discussing how to use xUnit with ASP.NET Core. The example itself is quite bare in my opinion, it doesn&amp;rsquo;t actually provide any real useful examples on how to implement xUnit with your application&amp;rsquo;s &lt;code&gt;DbContext&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mocking is the process of creating an instance of your context which you can populate with fake data, as the name suggests you are making a &amp;lsquo;mock&amp;rsquo; of it. By mocking your &lt;code&gt;DbContext&lt;/code&gt; you are able to isolate behaviour related to your Services which call upon your database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a follow up to my &lt;a href=&#34;https://marzukia.github.io/post/aspnet-jwt-webapi/&#34;&gt;previous article&lt;/a&gt;, where I outlined how I implemented JWT authentication in my Web API.&lt;/p&gt;
&lt;h1 id=&#34;the-setup&#34;&gt;The Setup&lt;/h1&gt;
&lt;p&gt;Queue two great testing libraries: &lt;a href=&#34;https://github.com/Moq/moq4/&#34;&gt;Moq&lt;/a&gt; and &lt;a href=&#34;https://github.com/romantitov/MockQueryable&#34;&gt;MockQueryable&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet add package Moq
dotnet add package MockQueryable.Moq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these libraries installed, we can get started writing our unit tests. The steps to set up a basic unit test which uses a mocked &lt;code&gt;DbContext&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create some fake data which we&amp;rsquo;ll use to test&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; users = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; List&amp;lt;ApplicationUser&amp;gt;() {
    &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; ApplicationUser() {
        Username = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
        Password = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;gw9L3AOoUxiEuKahonc17Twg47Sam64b4rm/ui/zTjU=&amp;#34;&lt;/span&gt;,
        Salt = Encoding
            .ASCII
            .GetBytes(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;\xea2858b16c8357ecb9ba6ababaa05594&amp;#34;&lt;/span&gt;)
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Convert this data into a queryable set using &lt;code&gt;MockQuerayble&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; mock = users.AsQueryable().BuildMockDbSet();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Create new &lt;code&gt;DbContext&lt;/code&gt; taking advantage of &lt;code&gt;UseInMemoryDatabase()&lt;/code&gt;. You can find more discussion about this on this &lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/&#34;&gt;MSDN article&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; options = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;UnitTestExampleContext&amp;gt;()
    .UseInMemoryDatabase(databaseName: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;UserServiceTest&amp;#34;&lt;/span&gt;)
    .Options;

MockContext = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; Mock&amp;lt;UnitTestExampleContext&amp;gt;(options);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Setup our &lt;code&gt;MockContext&lt;/code&gt; to map our &lt;code&gt;Users&lt;/code&gt; model correctly.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;MockContext.Setup(c =&amp;gt; c.Users).Returns(mock.Object);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Instantiate your &lt;code&gt;UserService&lt;/code&gt; and pass through the &lt;code&gt;MockContext&lt;/code&gt; into its constructor.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;_userService = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; UserService(MockContext.Object);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Write your tests!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;[Fact]
&lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task AuthenticateUser_IsValidUser_ReturnUser()
{
    &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _userService
        .Authenticate(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;testerday123&amp;#34;&lt;/span&gt;);

    Assert.True(user.GetType() == &lt;span style=&#34;color:#5f8700&#34;&gt;typeof&lt;/span&gt;(User),
        &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Valid user did not return a User object&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;full-working-example&#34;&gt;Full Working Example&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.Extensions.Options;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; UnitTestExample.Services;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; UnitTestExample.Models;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Xunit;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Moq;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; MockQueryable.Moq;

&lt;span style=&#34;color:#5f8700&#34;&gt;namespace&lt;/span&gt; UnitTestExample.Tests.Services
{
    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;UserServiceTest&lt;/span&gt;
    {
        &lt;span style=&#34;color:#5f8700&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;readonly&lt;/span&gt; IUserService _userService;

        &lt;span style=&#34;color:#5f8700&#34;&gt;protected&lt;/span&gt; Mock&amp;lt;UnitTestExampleContext&amp;gt; MockContext;

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; UserServiceTest()
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; users = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; List&amp;lt;ApplicationUser&amp;gt;() {
                &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; ApplicationUser() {
                    Username = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;,
                    Password = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;gw9L3AOoUxiEuKahonc17Twg47Sam64b4rm/ui/zTjU=&amp;#34;&lt;/span&gt;,
                    Salt = Encoding.ASCII
                        .GetBytes(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;\xea2858b16c8357ecb9ba6ababaa05594&amp;#34;&lt;/span&gt;)
                }
            };

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; mock = users.AsQueryable().BuildMockDbSet();

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; options = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; DbContextOptionsBuilder&amp;lt;UnitTestExampleContext&amp;gt;()
                .UseInMemoryDatabase(databaseName: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;UserServiceTest&amp;#34;&lt;/span&gt;)
                .Options;

            MockContext = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; Mock&amp;lt;UnitTestExampleContext&amp;gt;(options);
            MockContext
                .Setup(c =&amp;gt; c.Users)
                .Returns(mock.Object);

            _userService = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; UserService(MockContext.Object);
        }

        [Fact]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task AuthenticateUser_IsValidUser_ReturnUser()
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _userService
                .Authenticate(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;testerday123&amp;#34;&lt;/span&gt;);

            Assert.True(user.GetType() == &lt;span style=&#34;color:#5f8700&#34;&gt;typeof&lt;/span&gt;(User),
                &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Valid user did not return a User object&amp;#34;&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s not a hard process to set up a mocked &lt;code&gt;DbContext&lt;/code&gt;, however with the lack of general documentation it can be quite confusing initially.&lt;/p&gt;
&lt;p&gt;Hope I&amp;rsquo;ve saved you some time and good luck!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Using Fetch over Axios in ReactJS Applications</title>
       <link>https://marzukia.github.io/posts/frontend-resuable-api/</link>
       <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://marzukia.github.io/posts/frontend-resuable-api/</guid>
       <description>&lt;p&gt;For my last few projects I&amp;rsquo;ve made the switch from &lt;a href=&#34;https://www.google.com/search?client=firefox-b-d&amp;amp;q=axios&#34;&gt;Axios&lt;/a&gt; to plain ol&amp;rsquo; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&#34;&gt;Fetch&lt;/a&gt;. My rationale for making this switch was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Axios is a third party library. Where possible I would like to reduce usage of third party libraries; and&lt;/li&gt;
&lt;li&gt;Fetch is a perfectly capable library for the purposes of building my resuable API class with.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My approach in using Fetch or Axios is to create a class which contains all my API logic. The idea is to clearly define my &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; methods and then build understandable and elegant functions on top of these.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;interface&lt;/span&gt; Params { [key: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;]: any };

&lt;span style=&#34;color:#0087ff&#34;&gt;class&lt;/span&gt; API {
    baseUrl: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;;
    params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt; = {
        headers: {
            &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
        },
        credentials: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;include&amp;#39;&lt;/span&gt;,
        mode: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;cors&amp;#39;&lt;/span&gt;
    };

    &lt;span style=&#34;color:#0087ff&#34;&gt;constructor&lt;/span&gt;(baseUrl: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;) {
        &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl = baseUrl
    };
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;reusable-methods&#34;&gt;Reusable Methods&lt;/h1&gt;
&lt;p&gt;This next section I&amp;rsquo;ll break down my &amp;lsquo;main&amp;rsquo; methods which form the basis of my API class&amp;rsquo; functions.&lt;/p&gt;
&lt;h2 id=&#34;get&#34;&gt;GET&lt;/h2&gt;
&lt;p&gt;With my &lt;code&gt;GET&lt;/code&gt; method, I make params optional given. The params are then converted to search params and added to the url if applicable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;async get(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params?: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
    &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

    &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (params)
        url.search = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URLSearchParams(params).toString();

    &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;})
        .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
        .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;post&#34;&gt;POST&lt;/h2&gt;
&lt;p&gt;With my &lt;code&gt;POST&lt;/code&gt; method, params are compulsory. The params are passed through in the request&amp;rsquo;s body.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;async post(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
    &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

    &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, body: &lt;span style=&#34;color:#af0000&#34;&gt;JSON.stringify&lt;/span&gt;(params),})
        .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
        .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;put--delete&#34;&gt;PUT / DELETE&lt;/h2&gt;
&lt;p&gt;My &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; methods are more or less the same as how I construct my &lt;code&gt;POST&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;async put(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
    &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

    &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;, body: &lt;span style=&#34;color:#af0000&#34;&gt;JSON.stringify&lt;/span&gt;(params),})
        .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
        .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
};

async &lt;span style=&#34;color:#5f8700&#34;&gt;delete&lt;/span&gt;(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;) {
    &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

    &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;})
        .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
        .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error});
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Once we&amp;rsquo;ve defined these methods, we can create more specific methods which are highly understandable and structured. The below example shows how I would create a function which authenticates the user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;async authenticate(username: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;): Promise&amp;lt;User&amp;gt; {
    &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;users/authenticate/&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#0087ff&#34;&gt;let&lt;/span&gt; result = await &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.post(endpoint, {username: &lt;span style=&#34;color:#af0000&#34;&gt;username&lt;/span&gt;, password: &lt;span style=&#34;color:#af0000&#34;&gt;password&lt;/span&gt;});
    &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; result;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;full-working-example&#34;&gt;Full Working Example&lt;/h1&gt;
&lt;p&gt;Here is the full working example of my boilerplate Fetch API class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;interface&lt;/span&gt; Params { [key: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;]: any };

&lt;span style=&#34;color:#0087ff&#34;&gt;class&lt;/span&gt; API {
    baseUrl: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;;
    params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt; = {
        headers: {
            &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
        },
        credentials: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;include&amp;#39;&lt;/span&gt;,
        mode: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;cors&amp;#39;&lt;/span&gt;
    };

    &lt;span style=&#34;color:#0087ff&#34;&gt;constructor&lt;/span&gt;(baseUrl: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;) {
        &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl = baseUrl
    };

    async get(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params?: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
        &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

        &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (params)
            url.search = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URLSearchParams(params).toString();

        &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;})
            .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
            .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
    };

    async post(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
        &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

        &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, body: &lt;span style=&#34;color:#af0000&#34;&gt;JSON.stringify&lt;/span&gt;(params),})
            .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
            .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
    };

    async put(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, params: &lt;span style=&#34;color:#af0000&#34;&gt;Params&lt;/span&gt;) {
        &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

        &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;, body: &lt;span style=&#34;color:#af0000&#34;&gt;JSON.stringify&lt;/span&gt;(params),})
            .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
            .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error})
    };

    async &lt;span style=&#34;color:#5f8700&#34;&gt;delete&lt;/span&gt;(endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;) {
        &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; url: &lt;span style=&#34;color:#af0000&#34;&gt;URL&lt;/span&gt; = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; URL(endpoint, &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.baseUrl);

        &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; await fetch(url.toString(), {...&lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.params, method: &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;})
            .then((response) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; response.json()})
            .&lt;span style=&#34;color:#5f8700&#34;&gt;catch&lt;/span&gt;((error) =&amp;gt; {&lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; error});
    }

    async authenticate(username: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;): Promise&amp;lt;User&amp;gt; {
        &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; endpoint: &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;users/authenticate/&amp;#39;&lt;/span&gt;;
        &lt;span style=&#34;color:#0087ff&#34;&gt;let&lt;/span&gt; result = await &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.post(endpoint, {username: &lt;span style=&#34;color:#af0000&#34;&gt;username&lt;/span&gt;, password: &lt;span style=&#34;color:#af0000&#34;&gt;password&lt;/span&gt;});
        &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; result;
    };
};

&lt;span style=&#34;color:#0087ff&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;const&lt;/span&gt; api = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; API(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;https://localhost:5001/api/&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re already invested in using Axios in your developments/projects, there&amp;rsquo;s probably no reason to change.&lt;/p&gt;
&lt;p&gt;I personally quite like how succint the code is using Fetch, and bonus points to the fact that I am no longer reliant on a third party library.&lt;/p&gt;
&lt;p&gt;Lastly, with this article posted, I can now delete the code scraps I have saved on GitHub!&lt;/p&gt;
&lt;p&gt;Hope you&amp;rsquo;ve found the article useful.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>ASP.NET Core Web API JWT Implementation</title>
       <link>https://marzukia.github.io/posts/aspnet-jwt-webapi/</link>
       <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://marzukia.github.io/posts/aspnet-jwt-webapi/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve recently made the jump from using Django to ASP.NET Core as my primary choice when developing web applications. This was initially due to me branching into using C# for things like Unity, and later realizing how much better ASP.NET Core is than Django.&lt;/p&gt;
&lt;p&gt;As I mostly use ReactJS for my application frontends, I did not need the &amp;lsquo;Razor&amp;rsquo; pages integrated in ASP.NET. As a result, my preference was to bootstrap my projects as &lt;code&gt;webapi&lt;/code&gt; rather than &lt;code&gt;webapp&lt;/code&gt; or even &lt;code&gt;mvc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ASP.NET Core 3.1 is packaged the &lt;code&gt;Identity&lt;/code&gt; service. Micrsoft&amp;rsquo;s documentation on how to use this library with single page applications can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-api-authorization?view=aspnetcore-3.1&#34;&gt;here&lt;/a&gt;. My general issue with this is the fact that you need to implement usage of &lt;a href=&#34;https://identityserver.io/&#34;&gt;IdentityServer&lt;/a&gt;, and by bootstrapping your project in this manner you are using their &lt;code&gt;mvc&lt;/code&gt; or &lt;code&gt;webapp&lt;/code&gt; templates which contain a fair bit of bloat.&lt;/p&gt;
&lt;p&gt;This post will outline my implementation of a lightweight JWT authentication which is intended to be easily added onto a bare-bones &lt;code&gt;webapi&lt;/code&gt; project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: At time of writing, I am using ASP.NET Core version 3.1.5. If you are using an older version of ASP.NET core, some things &lt;em&gt;may&lt;/em&gt; not work.&lt;/p&gt;
&lt;h1 id=&#34;implementation-summary&#34;&gt;Implementation Summary&lt;/h1&gt;
&lt;p&gt;My implementation of JWT consists of the following components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;PasswordHasher&lt;/code&gt; helper to create a salt, and then a hashed password for safe storage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt; model to define what data we&amp;rsquo;d like to store in regards to our user object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UserService&lt;/code&gt; to handle authentication, registration, and any other user action we might want to implement.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UsersController&lt;/code&gt; to map our endpoints to our service, we&amp;rsquo;ll also instruct our &lt;code&gt;/api/user/login/&lt;/code&gt; endpoint to set a HttpOnly cookie containing our JWT.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition to the above, we need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adjust our &lt;code&gt;DbContext&lt;/code&gt; to include the &lt;code&gt;User&lt;/code&gt; model.&lt;/li&gt;
&lt;li&gt;Configure our &lt;code&gt;Startup&lt;/code&gt; to use &lt;code&gt;JwtBearer&lt;/code&gt; as an authentication mechanism.&lt;/li&gt;
&lt;li&gt;Configure out &lt;code&gt;Startup&lt;/code&gt; to set an &lt;code&gt;Authorization&lt;/code&gt; header using our HttpOnly cookie set by our &lt;code&gt;/api/user/login/&lt;/code&gt; endpoint.&lt;/li&gt;
&lt;li&gt;Configure our &lt;code&gt;Startup&lt;/code&gt; to use &lt;code&gt;UseAuthentication()&lt;/code&gt; and &lt;code&gt;UseAuthentication()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Inject our scoped &lt;code&gt;UserService&lt;/code&gt; into &lt;code&gt;Startup.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Adjust any other controllers which require authorization to include &lt;code&gt;[Authorize]&lt;/code&gt; in its definition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This tutorial will cover implementing the above which will provide you the following endpoints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;POST /api/user/register/&lt;/code&gt; for creation of new user objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /api/user/login/&lt;/code&gt; to allow users to login and authenticate themselves.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /api/user/info/&lt;/code&gt; to retrieve a user&amp;rsquo;s detail from their &lt;code&gt;Bearer&lt;/code&gt; token.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;component-explanation&#34;&gt;Component Explanation&lt;/h1&gt;
&lt;h2 id=&#34;passwordhasher&#34;&gt;PasswordHasher&lt;/h2&gt;
&lt;p&gt;The password which we&amp;rsquo;ll be storing will be encrypted using a salt we will generate. It should go without saying, but do not store passwords in plaintext.&lt;/p&gt;
&lt;p&gt;In order for us to achieve this, we&amp;rsquo;ll need to create a helper function which will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate a &lt;code&gt;byte[]&lt;/code&gt; salt&lt;/li&gt;
&lt;li&gt;And then hash the password using this salt, providing us a hashed password.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Security.Cryptography;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Cryptography.KeyDerivation;

&lt;span style=&#34;color:#5f8700&#34;&gt;namespace&lt;/span&gt; JwtAuthExample.Helpers
{
    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;interface&lt;/span&gt; IPasswordHasher
    {
        &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[] GenerateSalt();
        &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; HashPassword(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password, &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[] salt);
    }

    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;PasswordHasher&lt;/span&gt; : IPasswordHasher
    {
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[] GenerateSalt()
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; salt = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#00afaf&#34;&gt;128&lt;/span&gt; / &lt;span style=&#34;color:#00afaf&#34;&gt;8&lt;/span&gt;];
            &lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; rng = RNGCryptoServiceProvider.Create())
            {
                rng.GetBytes(salt);
            }
            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; salt;
        }

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; HashPassword(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password, &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[] salt)
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; hashedPassword = KeyDerivation.Pbkdf2(
                password: password,
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA1,
                iterationCount: &lt;span style=&#34;color:#00afaf&#34;&gt;10000&lt;/span&gt;,
                numBytesRequested: &lt;span style=&#34;color:#00afaf&#34;&gt;258&lt;/span&gt; / &lt;span style=&#34;color:#00afaf&#34;&gt;8&lt;/span&gt;
            );
            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; Convert.ToBase64String(hashedPassword);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above we take advantage of ASP.NET Core&amp;rsquo;s cryptographic library and use their &lt;code&gt;Pbkdf2&lt;/code&gt; key derivation function and the &lt;code&gt;HMACSHA1&lt;/code&gt; algorithm to hash our password using the salt we generate with our &lt;code&gt;GenerateSalt()&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;
&lt;p&gt;I consider this definition my &amp;lsquo;base&amp;rsquo; &lt;code&gt;User&lt;/code&gt; model. I will normally extend this model as needed by creating another model such as &lt;code&gt;ApplicationUser&lt;/code&gt; which inherits from &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The data we want to capture is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; Username&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; Password&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte[]&lt;/code&gt; Salt&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; Token&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our model definition is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.ComponentModel.DataAnnotations;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.ComponentModel.DataAnnotations.Schema;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Text.Json.Serialization;

&lt;span style=&#34;color:#5f8700&#34;&gt;namespace&lt;/span&gt; JwtAuthExample.Models
{
    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;User&lt;/span&gt;
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;long&lt;/span&gt; Id { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; Username { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }

        [JsonIgnore]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; Password { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }

        [JsonIgnore]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;byte&lt;/span&gt;[] Salt { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; Token { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }
    }

    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;UserDTO&lt;/span&gt;
    {
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; Username { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; Password { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above example we&amp;rsquo;ve explicitly declared &lt;code&gt;Password&lt;/code&gt; to be ignored during serialization. This is good practice to ensure that this data is never unintentionally accessible.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll create a Data Transfer Object (DTO) as our temporary model when doing things such as authenticating or registering the user. You&amp;rsquo;ll see how this works in the &lt;code&gt;UsersController&lt;/code&gt; section.&lt;/p&gt;
&lt;h2 id=&#34;userservice&#34;&gt;UserService&lt;/h2&gt;
&lt;p&gt;Our &lt;code&gt;UserService&lt;/code&gt; will handle all the operations related to our &lt;code&gt;User&lt;/code&gt; actions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Authenticate(username, password)&lt;/code&gt; functions is summarized as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DbContext&lt;/code&gt; searches the &lt;code&gt;Users&lt;/code&gt; context for a match in function input &lt;code&gt;username&lt;/code&gt; . If none is found at this point, &lt;code&gt;null&lt;/code&gt; user is returned.&lt;/li&gt;
&lt;li&gt;The function input &lt;code&gt;password&lt;/code&gt; is hashed using the &lt;code&gt;Salt&lt;/code&gt; saved in the database, if the saved hashed &lt;code&gt;Password&lt;/code&gt; matches this output, a  new claim is created and a JWT token is created; this token is subsequently saved onto the User model. If this validation fails, &lt;code&gt;null&lt;/code&gt; user is returned.&lt;/li&gt;
&lt;li&gt;The successfully authenticated &lt;code&gt;User&lt;/code&gt; is returned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;Register(username, password)&lt;/code&gt; function is summarized as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DbContext&lt;/code&gt; searches the &lt;code&gt;Users&lt;/code&gt; context for a match in function input &lt;code&gt;username&lt;/code&gt;, if one is found &lt;code&gt;null&lt;/code&gt; is returned.&lt;/li&gt;
&lt;li&gt;If no existing &lt;code&gt;User&lt;/code&gt; is found, a &lt;code&gt;Salt&lt;/code&gt; is generated using &lt;code&gt;PasswordHasher().GenerateSalt()&lt;/code&gt; and then the password is hashed using &lt;code&gt;PasswordHasher().HashPassword(password, salt)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Upon successful generation of the above, a new &lt;code&gt;User&lt;/code&gt; is created.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is defined as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.IdentityModel.Tokens.Jwt;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Security.Claims;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Text;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.Extensions.Options;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.IdentityModel.Tokens;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; JwtAuthExample.Models;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; JwtAuthExample.Helpers;

&lt;span style=&#34;color:#5f8700&#34;&gt;namespace&lt;/span&gt; JwtAuthExample.Services
{
    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;interface&lt;/span&gt; IUserService
    {
        Task&amp;lt;User&amp;gt; Authenticate(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password);
        Task&amp;lt;User&amp;gt; Register(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password);
    }

    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;UserService&lt;/span&gt;: IUserService
    {
        &lt;span style=&#34;color:#5f8700&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;readonly&lt;/span&gt; JwtAuthExampleContext _context;

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; UserService(JwtAuthExampleContext context)
        {
            _context = context;
        }

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt; Authenticate(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password)
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; hasher = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; PasswordHasher();
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _context.Users.FirstOrDefaultAsync(x =&amp;gt;
                x.Username == username
            );

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (user == &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;)
                &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;;

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; hashedPassword = hasher.HashPassword(password, user.Salt);

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (user.Password == hashedPassword)
            {
                &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; tokenHandler = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; JwtSecurityTokenHandler();
                &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; key = Encoding.ASCII.GetBytes(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;SECRETCODESTRING&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; tokenDescriptor = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; SecurityTokenDescriptor
                {
                    Subject = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; ClaimsIdentity(&lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; Claim[]
                    {
                        &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; Claim(ClaimTypes.Name, user.Id.ToString())
                    }),
                    Expires = DateTime.UtcNow.AddDays(&lt;span style=&#34;color:#00afaf&#34;&gt;7&lt;/span&gt;),
                    SigningCredentials = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; SigningCredentials(
                        &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; SymmetricSecurityKey(key),
                        SecurityAlgorithms.HmacSha256Signature
                    )
                };
                &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; token = tokenHandler.CreateToken(tokenDescriptor);
                user.Token = tokenHandler.WriteToken(token);
                &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _context.SaveChangesAsync();
            } &lt;span style=&#34;color:#5f8700&#34;&gt;else&lt;/span&gt; {
                user = &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; user;
        }

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task&amp;lt;User&amp;gt; Register(&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt; password)
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; validUser = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _context.Users.FirstOrDefaultAsync(x =&amp;gt;
                x.Username == username
            );

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (validUser != &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;)
                &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;;

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; hasher = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; PasswordHasher();
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; salt = hasher.GenerateSalt();
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; hashedPassword = hasher.HashPassword(password, salt);

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; ApplicationUser
            {
                Username = username,
                Password = hashedPassword,
                Salt = salt
            };

            _context.Users.Add(user);

            &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _context.SaveChangesAsync();

            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; user;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;userscontroller&#34;&gt;UsersController&lt;/h2&gt;
&lt;p&gt;The majority of this code example in this section should hopefully be self explanatory.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;[HttpGet(&amp;quot;info&amp;quot;)]&lt;/code&gt; route demonstrates how to get the &lt;code&gt;User&lt;/code&gt; in the controller by using the JWT claim.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;[HttpPost(&amp;quot;authenticate&amp;quot;)]&lt;/code&gt; has a working example on how to set the JWT cookie as a HttpOnly cookie.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Mvc;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.AspNetCore.Authorization;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.EntityFrameworkCore;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; Microsoft.Net.Http.Headers;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Net.Http;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; System.Threading.Tasks;

&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; JwtAuthExample.Services;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; JwtAuthExample.Models;
&lt;span style=&#34;color:#5f8700&#34;&gt;using&lt;/span&gt; JwtAuthExample.Helpers;

&lt;span style=&#34;color:#5f8700&#34;&gt;namespace&lt;/span&gt; JwtAuthExample.Controllers
{
    [Authorize]
    [Route(&amp;#34;api/users&amp;#34;)]
    [ApiController]
    &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0087ff&#34;&gt;UsersController&lt;/span&gt; : ControllerBase
    {
        &lt;span style=&#34;color:#5f8700&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;readonly&lt;/span&gt; JwtAuthExampleContext _context;

        &lt;span style=&#34;color:#5f8700&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;readonly&lt;/span&gt; IUserService _userService;
        &lt;span style=&#34;color:#5f8700&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;readonly&lt;/span&gt; IUserTools _userTools;

        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; UsersController(IUserService userService, JwtAuthExampleContext context)
        {
            _userService = userService;
            _context = context;
            _userTools = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; UserTools();
        }

        [HttpGet(&amp;#34;info&amp;#34;)]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;User&amp;gt;&amp;gt; GetUser()
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; claimsIdentity = &lt;span style=&#34;color:#5f8700&#34;&gt;this&lt;/span&gt;.User.Identity &lt;span style=&#34;color:#5f8700&#34;&gt;as&lt;/span&gt; ClaimsIdentity;
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; userId = claimsIdentity.FindFirst(ClaimTypes.Name)?.Value;
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _context.Users.FindAsync(&lt;span style=&#34;color:#af0000&#34;&gt;long&lt;/span&gt;.Parse(userId));

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (user == &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;)
                &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; BadRequest();

            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; user;
        }

        [AllowAnonymous]
        [HttpPost(&amp;#34;authenticate&amp;#34;)]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;User&amp;gt;&amp;gt; Authenticate([FromBody]UserDTO model)
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _userService.Authenticate(model.Username, model.Password);

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (user == &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;)
            {
                &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; errorMessage = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; {message = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Username or password is incorrect&amp;#34;&lt;/span&gt;};
                &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; BadRequest(errorMessage);
            }

            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; cookieOptions = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; CookieOptions
            {
                Path = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;,
                Expires = DateTimeOffset.UtcNow.AddDays(&lt;span style=&#34;color:#00afaf&#34;&gt;7&lt;/span&gt;),
                IsEssential = &lt;span style=&#34;color:#5f8700&#34;&gt;true&lt;/span&gt;,
                HttpOnly = &lt;span style=&#34;color:#5f8700&#34;&gt;true&lt;/span&gt;,
                Secure = &lt;span style=&#34;color:#5f8700&#34;&gt;true&lt;/span&gt;
            };

            Response.Cookies.Append(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;, user.Token, cookieOptions);

            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; Ok(user);
        }

        [AllowAnonymous]
        [HttpPost(&amp;#34;register&amp;#34;)]
        &lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; Task&amp;lt;ActionResult&amp;lt;User&amp;gt;&amp;gt; RegisterUser(UserDTO model)
        {
            &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; user = &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; _userService.Register(model.Username, model.Password);

            &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (user == &lt;span style=&#34;color:#5f8700&#34;&gt;null&lt;/span&gt;)
                &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; BadRequest(&lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; {message = &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Username already exists&amp;#34;&lt;/span&gt;});

            &lt;span style=&#34;color:#5f8700&#34;&gt;return&lt;/span&gt; CreatedAtAction(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;GetUser&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; { id = user.Id }, user);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;implementing-our-components&#34;&gt;Implementing our Components&lt;/h1&gt;
&lt;h2 id=&#34;adjusting-your-dbcontext&#34;&gt;Adjusting your DbContext&lt;/h2&gt;
&lt;p&gt;In your &lt;code&gt;DbContext&lt;/code&gt; you&amp;rsquo;ll need to add the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#5f8700&#34;&gt;virtual&lt;/span&gt; DbSet&amp;lt;ApplicationUser&amp;gt; Users { &lt;span style=&#34;color:#5f8700&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#5f8700&#34;&gt;set&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you&amp;rsquo;ve done this, make sure you migrate and affect your changes by doing the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet ef migrations add  AddUserModel -v
dotnet ef database update -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-jwtbearer&#34;&gt;Adding JwtBearer&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need to install the &lt;code&gt;JwtBearer&lt;/code&gt; package by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to tell our application to use &lt;code&gt;JwtBearer&lt;/code&gt; as it&amp;rsquo;s authentication mechanism.&lt;/p&gt;
&lt;p&gt;Adjust your &lt;code&gt;ConfigureServices(IServiceCollection services)&lt;/code&gt; to include the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; key = Encoding.ASCII.GetBytes(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;SECRETCODESTRING&amp;#34;&lt;/span&gt;);
services.AddAuthentication(x =&amp;gt;
{
	x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
	x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(x =&amp;gt;
{
	x.RequireHttpsMetadata = &lt;span style=&#34;color:#5f8700&#34;&gt;false&lt;/span&gt;;
	x.SaveToken = &lt;span style=&#34;color:#5f8700&#34;&gt;true&lt;/span&gt;;
	x.TokenValidationParameters = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; TokenValidationParameters
	{
		ValidateIssuerSigningKey = &lt;span style=&#34;color:#5f8700&#34;&gt;true&lt;/span&gt;,
		IssuerSigningKey = &lt;span style=&#34;color:#5f8700&#34;&gt;new&lt;/span&gt; SymmetricSecurityKey(key),
		ValidateIssuer = &lt;span style=&#34;color:#5f8700&#34;&gt;false&lt;/span&gt;,
		ValidateAudience = &lt;span style=&#34;color:#5f8700&#34;&gt;false&lt;/span&gt;
	};
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-userservice&#34;&gt;Adding UserService&lt;/h2&gt;
&lt;p&gt;We need to inject our &lt;code&gt;UserService&lt;/code&gt; and it&amp;rsquo;s interface &lt;code&gt;IUserService&lt;/code&gt; into &lt;code&gt;Startup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Adjust your &lt;code&gt;ConfigureServices(IServiceCollection services)&lt;/code&gt; to include the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;services.AddScoped&amp;lt;IUserService, UserService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-our-middleware-to-use-jwt-httponly-cookie&#34;&gt;Adding our Middleware to use JWT HttpOnly Cookie&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s really bad form to store our JWT in local storage. Where possible, we want to make use of HttpOnly cookies which are more secure. To make our controllers use the HttpOnly cookie we need to place a middleware in our &lt;code&gt;Startup&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;app.Use(&lt;span style=&#34;color:#5f8700&#34;&gt;async&lt;/span&gt; (context, next) =&amp;gt;
{
    &lt;span style=&#34;color:#af0000&#34;&gt;var&lt;/span&gt; token = context.Request.Cookies[&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;];

    &lt;span style=&#34;color:#5f8700&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#af0000&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(token))
        context.Request.Headers.Add(&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;Bearer &amp;#34;&lt;/span&gt; + token);

    &lt;span style=&#34;color:#5f8700&#34;&gt;await&lt;/span&gt; next();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;final-touches&#34;&gt;Final Touches&lt;/h2&gt;
&lt;p&gt;Adjust your &lt;code&gt;Configure(IApplicationBuilder app, IWebHostEnvironment env)&lt;/code&gt; with the following additions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;app.UseAuthentication();
app.UseAuthorization();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;requiring-authorization-for-your-controllers&#34;&gt;Requiring Authorization for your Controllers&lt;/h2&gt;
&lt;p&gt;You can now specify &lt;code&gt;[Authorize]&lt;/code&gt; at the top of your controller definitions to require a JWT token. If you want to allow anonymous access to a route, you can specify the &lt;code&gt;[AllowAnonymous]&lt;/code&gt; decorator for the specific route.&lt;/p&gt;
&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;Implementing your own alternative to &lt;code&gt;Identity&lt;/code&gt; is not overly cumbersome - it can be done quite quickly and effectively as above.&lt;/p&gt;
&lt;p&gt;While I was predominately using Django, I found myself using third party libraries to achieve what I wanted. The result of this was that I did not truly understand the flow of my program&amp;rsquo;s authentication.&lt;/p&gt;
&lt;p&gt;By doing the above implementation, I was able to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understand the process very clearly&lt;/li&gt;
&lt;li&gt;Ensure that the JWT implementation did not contain additional bloat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lastly, I hope this post was helpful, if you have any comments or critiques to my approach for implementing JWT above I&amp;rsquo;d love to hear it.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Fedora 32 and GPU Passthrough (VFIO)</title>
       <link>https://marzukia.github.io/posts/fedora32-vfio/</link>
       <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
       
       <guid>https://marzukia.github.io/posts/fedora32-vfio/</guid>
       <description>&lt;p&gt;I&amp;rsquo;ve used Fedora 32 as my main OS for about two years. Overall, it has been a very pleasant experience and has made things such as developing much easier than it would&amp;rsquo;ve been on Windows.&lt;/p&gt;
&lt;p&gt;However&amp;hellip; gaming on Linux is frankly a pain in the ass. No matter the state of Vulkan, Proton, Wine, etc, you&amp;rsquo;ll always find Windows games which will flat out not work. More recently, I found that Escape From Tarkov did not work at all on Linux due to Easy Anticheat.&lt;/p&gt;
&lt;p&gt;This has meant that I&amp;rsquo;ve had to do one of my most hated things in the world&amp;hellip; dual booting. When I dual boot I tend to lose access to all the services I have set up on my main computer such as Plex and Jupyterhub, my NGINX routing, and lastly stuff I use to develop such as Jenkins.&lt;/p&gt;
&lt;p&gt;Fortunately, a friend of mine reminded me about GPU passthrough, also known as VFIO. This is a process of allowing a VM to have complete control over a PCIe component such as a GPU. If done right, this means you could spin up a Windows VM which has the full power of a physical graphics card whilst never leaving your main OS.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve written this post as I&amp;rsquo;ve recently gone through the process of setting up a VM with GPU Passthrough recently and spent a lot of time trying to get it working. If I can save someone else an hour of their life trying to troubleshoot a particular issue I&amp;rsquo;ll consider this post a success.&lt;/p&gt;
&lt;h1 id=&#34;my-setup&#34;&gt;My Setup&lt;/h1&gt;
&lt;p&gt;In order to do GPU pass-through, you&amp;rsquo;ll need to have two graphics cards. A single GPU pass-through is &amp;lsquo;jank&amp;rsquo; requiring you to terminate your xorg session in order to switch between Windows and Fedora.&lt;/p&gt;
&lt;p&gt;For the purposes of doing GPU passthrough, I purchased the above &lt;a href=&#34;https://www.pbtech.co.nz/product/VGASAP9552/Sapphire-Pulse-Radeon-RX550-2G-GDDR5-Graphics-Card&#34;&gt;AMD Radeon RX550&lt;/a&gt; for about $100 NZD. Since I only use two monitors - a primary 32&amp;rsquo;&amp;rsquo; 1440p monitor and secondary vertical 22&amp;rsquo;&amp;rsquo; 1080p monitor, I didn&amp;rsquo;t need anything particularly overpowered for my host card.&lt;/p&gt;
&lt;p&gt;In some other threads I read that having identical GPUs causes issues with the VFIO process. Conversely, I&amp;rsquo;ve seen people successfully complete this such as the write up found &lt;a href=&#34;https://pastebin.com/5tuvWTMH&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your set up will be different, so your mileage may vary. Some instructions will have to be adjusted, however my set up is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;- Fedora 32 (Kernel 5.6.10-300.fc32.x86_64)
- ASROCK X399M Taichi
- AMD Ryzen Threadripper 2920X
- NVIDIA GTX 1080
- AMD Radeon RX550
- 32GB DDR4 RAM
- Storage
    - 512GB SSD
    - 256GB SSD
    - 2TB HD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For my Windows VM, I used a dedicated SSD as its storage volume, and mounted it raw rather than using a virtual disk. This is to improve the performance of the VM.&lt;/p&gt;
&lt;h1 id=&#34;but-how&#34;&gt;But&amp;hellip; How?&lt;/h1&gt;
&lt;p&gt;My key reference while doing this setup was the following &lt;a href=&#34;https://forum.level1techs.com/t/vfio-in-2019-fedora-workstation-general-guide-though-branch-draft/145106&#34;&gt;BansheeHero&amp;rsquo;s excellent guide&lt;/a&gt;. Whilst the post itself is not complete, and good chunks of it are cut paste from a different thread, it outlines the general steps required to accomplish the setup.&lt;/p&gt;
&lt;p&gt;However&amp;hellip; there were some important steps in this guide that weren&amp;rsquo;t made clear which resulted  in me wasting a material amount of time. In this post I will try make these key steps clearer.&lt;/p&gt;
&lt;h2 id=&#34;iommu-and-you&#34;&gt;IOMMU &amp;hellip;and You&lt;/h2&gt;
&lt;p&gt;IOMMU stands for &amp;lsquo;Input-output memory management unit&amp;rsquo;, it&amp;rsquo;s a feature which allows your VMs to take advantage of your computer&amp;rsquo;s hardware. To accomplish the GPU pass-through this will need to be enabled.&lt;/p&gt;
&lt;h3 id=&#34;setting-iommu-in-your-bios&#34;&gt;Setting IOMMU in your BIOS&lt;/h3&gt;
&lt;p&gt;Before proceeding to the next steps, you need to ensure that IOMMU has been &amp;lsquo;Enabled&amp;rsquo; in your BIOS. It&amp;rsquo;s best to explicitly override this value if it has been set to &amp;lsquo;Automatic&amp;rsquo; to ensure your computer does what is asked of it.&lt;/p&gt;
&lt;p&gt;In my case, my setting was set to &amp;lsquo;Automatic&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;checking-your-iommu-groups&#34;&gt;Checking your IOMMU Groups&lt;/h3&gt;
&lt;p&gt;The next step is to run the following bash script to ensure that your IOMMU groups have been setup correctly.&lt;/p&gt;
&lt;p&gt;Your GPU and its audio controller need to be isolated in its own IOMMU group. This also applies to any other PCIe devices you&amp;rsquo;d like to pass-through to the VM including USB ports and soundcards.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#5f8700&#34;&gt;for&lt;/span&gt; d in /sys/kernel/iommu_groups/*/devices/*; &lt;span style=&#34;color:#5f8700&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#0087ff&#34;&gt;n&lt;/span&gt;=&lt;span style=&#34;color:#00afaf&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;d&lt;/span&gt;#*/iommu_groups/*&lt;span style=&#34;color:#00afaf&#34;&gt;}&lt;/span&gt;; &lt;span style=&#34;color:#0087ff&#34;&gt;n&lt;/span&gt;=&lt;span style=&#34;color:#00afaf&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;n&lt;/span&gt;%%/*&lt;span style=&#34;color:#00afaf&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#0087ff&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;IOMMU Group %s &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;$n&lt;/span&gt;&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;&lt;/span&gt;
  lspci -nns &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#00afaf&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;d&lt;/span&gt;##*/&lt;span style=&#34;color:#00afaf&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#5f8700&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On running this command, you&amp;rsquo;ll want to look for your GPU and ensure it&amp;rsquo;s there. In my case I see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;IOMMU Group 29 41:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1)
IOMMU Group 29 41:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, my PCIe devices have the ids &lt;code&gt;41:00.0&lt;/code&gt; and &lt;code&gt;41:00.1&lt;/code&gt;. They are grouped together and isolated in Group 29.&lt;/p&gt;
&lt;h2 id=&#34;installing-the-virtualisation-package&#34;&gt;Installing the Virtualisation Package&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need the packages from the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dnf install @virtualization
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My user is in wheel so not much further group configuration was necessary. If you don&amp;rsquo;t have your user in there you&amp;rsquo;ll need to do further configuration.&lt;/p&gt;
&lt;h2 id=&#34;modifying-your-grub&#34;&gt;Modifying your GRUB&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need to add some paramaters to your GRUB configuration. You can access the file doing the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim /etc/sysconfig/grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add &lt;code&gt;amd_iommu=on rd.driver.pre=vfio-pci&lt;/code&gt; to &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt;, if you have an Intel chip you&amp;rsquo;ll need to use &lt;code&gt;intel_iommu=on&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I&amp;rsquo;ve not gone through this process on an Intel machine so I am not 100% sure if there are any other tweaks that need to be done for the rest of the tutorial.&lt;/p&gt;
&lt;h2 id=&#34;rebuilding-initramfs&#34;&gt;Rebuilding initramfs&lt;/h2&gt;
&lt;p&gt;In order to allow VFIO to happen, we need to adjust the boot process to ensure that the VFIO drivers are loaded and bound to the relevant PCIe devices rather than the normal ones.&lt;/p&gt;
&lt;h3 id=&#34;getting-the-device-ids&#34;&gt;Getting the Device IDs&lt;/h3&gt;
&lt;p&gt;In my case, I wanted to specifically pass-through my NVIDIA GTX1080. I can find the specific devices by running the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lspci -vnn | grep NVIDIA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This provides me the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;41:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1) (prog-if 00 [VGA controller])
41:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For each device I am interested in it&amp;rsquo;s device ID (&lt;code&gt;10de:10f0&lt;/code&gt;, &lt;code&gt;10de:1b80&lt;/code&gt;). We need this information as this is how we&amp;rsquo;ll inform our bootloader which devices need to be reserved.&lt;/p&gt;
&lt;h3 id=&#34;modifying-modprobe&#34;&gt;Modifying Modprobe&lt;/h3&gt;
&lt;p&gt;We need to tell Modprobe which devices we want to reserve for VFIO. In order to do this, we run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;options vfio-pci ids=10de:1b80,10de:10f0&amp;#34;&lt;/span&gt; &amp;gt; /etc/modprobe.d/vfio.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rebuilding-initramfs-1&#34;&gt;Rebuilding initramfs&lt;/h3&gt;
&lt;p&gt;Execute the following commands to instruct dracut to load the vfio drivers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dracut --add-drivers &lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;vfio vfio-pci vfio_iommu_type1&amp;#34;&lt;/span&gt; --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this has been completed, we can force a rebuild of initramfs image by executing the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dracut -fv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pre-reboot-check-in&#34;&gt;Pre-reboot Check-in&lt;/h3&gt;
&lt;p&gt;Before we reboot, we want to make sure all the things we did above has been affected. When you run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lsinitrd | grep vfio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-rw-r--r--   1 root     root           41 Mar 17 04:13 etc/modprobe.d/vfio.conf
drwxr-xr-x   3 root     root            0 Mar 17 04:13 usr/lib/modules/5.6.10-300.fc32.x86_64/kernel/drivers/vfio
drwxr-xr-x   2 root     root            0 Mar 17 04:13 usr/lib/modulesKernel driver in use: vfio-pci/5.6.10-300.fc32.x86_64/kernel/drivers/vfio/pci
-rw-r--r--   1 root     root        25068 Mar 17 04:13 usr/lib/modules/5.6.10-300.fc32.x86_64/kernel/drivers/vfio/pci/vfio-pci.ko.xz
-rw-r--r--   1 root     root        13368 Mar 17 04:13 usr/lib/modules/5.6.10-300.fc32.x86_64/kernel/drivers/vfio/vfio_iommu_type1.ko.xz
-rw-r--r--   1 root     root        12320 Mar 17 04:13 usr/lib/modules/5.6.10-300.fc32.x86_64/kernel/drivers/vfio/vfio.ko.xz
-rw-r--r--   1 root     root         3212 Mar 17 04:13 usr/lib/modules/5.6.10-300.fc32.x86_64/kernel/drivers/vfio/vfio_virqfd.ko.xz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything is good at this point, you now need to reboot.&lt;/p&gt;
&lt;h3 id=&#34;post-reboot-check-in&#34;&gt;Post-reboot Check-in&lt;/h3&gt;
&lt;p&gt;We now need to ensure that the PCIe devices we specified for VFIO have been correctly reserved. If we run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lspci -nnv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see that our NVIDIA GTX 1080 shows the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;41:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1) (prog-if 00 [VGA controller])
	Subsystem: eVga.com. Corp. Device [3842:6183]
	Flags: bus master, fast devsel, latency 0, IRQ 101, NUMA node 1
	Memory at be000000 (32-bit, non-prefetchable) [size=16M]
	Memory at 80000000 (64-bit, prefetchable) [size=256M]
	Memory at 90000000 (64-bit, prefetchable) [size=32M]
	I/O ports at 4000 [size=128]
	Expansion ROM at bf000000 [disabled] [size=512K]
	Capabilities: [60] Power Management version 3
	Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+
	Capabilities: [78] Express Legacy Endpoint, MSI 00
	Capabilities: [100] Virtual Channel
	Capabilities: [128] Power Budgeting &amp;lt;?&amp;gt;
	Capabilities: [420] Advanced Error Reporting
	Capabilities: [600] Vendor Specific Information: ID=0001 Rev=1 Len=024 &amp;lt;?&amp;gt;
	Capabilities: [900] Secondary PCI Express
	Kernel driver in use: vfio-pci
	Kernel modules: nouveau

41:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)
	Subsystem: eVga.com. Corp. Device [3842:6183]
	Flags: bus master, fast devsel, latency 0, IRQ 102, NUMA node 1
	Memory at bf080000 (32-bit, non-prefetchable) [size=16K]
	Capabilities: [60] Power Management version 3
	Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+
	Capabilities: [78] Express Endpoint, MSI 00
	Capabilities: [100] Advanced Error Reporting
	Kernel driver in use: vfio-pci
	Kernel modules: snd_hda_intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The thing we&amp;rsquo;re looking for is &lt;code&gt;Kernel driver in use: vfio-pci&lt;/code&gt;. If you see this, you&amp;rsquo;ve successfully reserved the PCIe deviced for use by the VM.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-your-virtual-machine&#34;&gt;Setting up your Virtual Machine&lt;/h2&gt;
&lt;h3 id=&#34;before-you-start&#34;&gt;Before you Start&lt;/h3&gt;
&lt;p&gt;The first thing you should check is your QEMU version. You can do this by doing the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;qemu-kvm --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This guide assumes you have a QEMU version of 4.2 or greater. There are implications of using earlier versions of QEMU which I will not be covering or addressing in this post.&lt;/p&gt;
&lt;h3 id=&#34;setting-up-your-vm&#34;&gt;Setting up your VM&lt;/h3&gt;
&lt;p&gt;Open up virt-manager and create a new Virtual Machine. You can get a copy of the Windows 10 ISO &lt;a href=&#34;https://www.microsoft.com/en-us/software-download/windows10ISO&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once virt-manager is open, do the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new VM and use the Windows 10 ISO you&amp;rsquo;ve just downloaded.&lt;/li&gt;
&lt;li&gt;Specify how much memory and CPU you&amp;rsquo;d like to allocate your VM. For my particular set up I&amp;rsquo;ve used 16GB RAM and 8 CPUs.&lt;/li&gt;
&lt;li&gt;When choosing storage, tick &amp;lsquo;Select or create custom storage&amp;rsquo; and type to path to your target drive. In this case it was my blank SSD &lt;code&gt;/dev/sdc1/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On the next step, tick &amp;lsquo;Customize configuration before install&amp;rsquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point you&amp;rsquo;ll be brought to a configuration screen, ensure the following things are set:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chipset is selected as &amp;lsquo;Q35&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Firmware is set to UEFI/OVMF&lt;/li&gt;
&lt;li&gt;Add your GPU and its audio controller by clicking &amp;lsquo;Add Hardware&amp;rsquo; and selecting Host PCI Device&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the above are set, we&amp;rsquo;re ready to start. Hit apply and let Windows 10 install.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We&amp;rsquo;ll need to tweak CPU settings and topology but we&amp;rsquo;ll get to that in the optimisation section.&lt;/p&gt;
&lt;h3 id=&#34;hiding-the-hypervisor&#34;&gt;Hiding the Hypervisor&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a fair few tweaks we need to do in order to get the VM to work with our NVIDIA card. For whatever reason, NVIDIA does not allow their drivers to be used inside emulations. Luckily for us, we can hide the fact that our VM is a emulation by modifying our virtual machine&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;Open up your VM with the following command, make sure you change the VM to the appropriate name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;EDITOR&lt;/span&gt;=vim virsh edit win10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You need to edit your VM configuration to include the following elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;domain&lt;/span&gt; type=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;kvm&amp;#39;&lt;/span&gt; xmlns:qemu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;http://libvirt.org/schemas/domain/qemu/1.0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;gt;&lt;/span&gt;
    ...
        &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
            ...
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;kvm&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;hidden&lt;/span&gt; state=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/kvm&amp;gt;&lt;/span&gt;
            ...
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;hyperv&amp;gt;&lt;/span&gt;
                ...
                &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vendor_id&lt;/span&gt; state=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt; value=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;whatever&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/hyperv&amp;gt;&lt;/span&gt;
            ...
        &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
    ...
        &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;qemu:commandline&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;qemu:arg&lt;/span&gt; value=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;-cpu&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;qemu:arg&lt;/span&gt; value=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;host,hv_time,kvm=off,hv_vendor_id=null&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/qemu:commandline&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By changing the above we&amp;rsquo;ve accomplished the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We&amp;rsquo;ve spoofed a &lt;code&gt;vendor_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve told QEMU to hide the fact we&amp;rsquo;re in an emulation&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve passed through some QEMU commands to make doubly sure NVIDIA can&amp;rsquo;t detect we&amp;rsquo;re in an emulation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 3 might be a bit of a duplication, but this is what caused my VM to finally work.&lt;/p&gt;
&lt;h3 id=&#34;installing-nvidia-drivers&#34;&gt;Installing NVIDIA Drivers&lt;/h3&gt;
&lt;p&gt;You can now install NVIDIA drivers, if all went well above you will not see a &amp;lsquo;Error 43&amp;rsquo; when you open Device Manager.&lt;/p&gt;
&lt;h3 id=&#34;installing-barrier&#34;&gt;Installing Barrier&lt;/h3&gt;
&lt;p&gt;Once you disable Spice you won&amp;rsquo;t be able to use your keyboard without passing through a USB port or doing a RDP.&lt;/p&gt;
&lt;p&gt;At this point you should install Barrier or something similar. You can find the GitHub repo &lt;a href=&#34;https://github.com/debauchee/barrier&#34;&gt;here&lt;/a&gt;. Barrier is a fork of Synergy - it&amp;rsquo;s awesome. Syngery has terrible support for Fedora.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This a future note for future you, when you try to play games later you may find that your mouse gets locked at the center of the screens and madly spins/rotates - to fix this you&amp;rsquo;ll need to change your Barrier server settings to the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Emulate relative mouse movements&lt;/li&gt;
&lt;li&gt;Set a hot key to enable screen lock&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;disabling-spice&#34;&gt;Disabling Spice&lt;/h3&gt;
&lt;p&gt;Once you&amp;rsquo;re happy with your Barrier set up, it&amp;rsquo;s time to remove Spice.&lt;/p&gt;
&lt;p&gt;Shutdown your VM and remove all the Spice components.&lt;/p&gt;
&lt;h3 id=&#34;cable-time&#34;&gt;Cable Time&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;EDITOR&lt;/span&gt;=vim virsh edit win10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Plug your monitor into your VM&amp;rsquo;s allocated GPU and start up your VM. You should now see everything work bueno.&lt;/p&gt;
&lt;p&gt;At this point, you will now have a functioning VM with GPU pass-through. However&amp;hellip; there&amp;rsquo;s one more things you need to do before your VM will be ready to play games&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;cpu-pinning--topology&#34;&gt;CPU Pinning &amp;amp; Topology&lt;/h2&gt;
&lt;p&gt;Virt-manager&amp;rsquo;s default allocation of vCPUs is subpar and is not great. In order to get acceptable performance from the virtual machine we need to ensure we allocate## Tuning your Virtual Machine sane CPUs in the configuration.&lt;/p&gt;
&lt;p&gt;In my case, doing this configuration doubled the benchmarks of my virtual machines CPU.&lt;/p&gt;
&lt;h3 id=&#34;understanding-your-cores&#34;&gt;Understanding your Cores&lt;/h3&gt;
&lt;p&gt;I use &lt;code&gt;lstopo&lt;/code&gt; in this section. If you have something else you prefer to use, you can use that too.&lt;/p&gt;
&lt;p&gt;In my setup, you can see that cores 6/18 to 11/23 are closer to my GPU &lt;code&gt;PCI 41:00.0&lt;/code&gt;. Now that I know which cores to use, I can explicitly allocate them in my virtual machine&amp;rsquo;s configuration.&lt;/p&gt;
&lt;h3 id=&#34;modifying-your-settings&#34;&gt;Modifying your Settings&lt;/h3&gt;
&lt;p&gt;Using the following command again:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;EDITOR&lt;/span&gt;=vim virsh edit win10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edit your settings to explicitly declare which CPU sets should be used, in my case this is my configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;  &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpu&lt;/span&gt; placement=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;gt;&lt;/span&gt;8&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/vcpu&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;iothreads&amp;gt;&lt;/span&gt;2&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/iothreads&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;cputune&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;18&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;19&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;20&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;vcpupin&lt;/span&gt; vcpu=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;emulatorpin&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;0-1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;iothreadpin&lt;/span&gt; iothread=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;0-1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;iothreadpin&lt;/span&gt; iothread=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; cpuset=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#39;2-3&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/cputune&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;modifying-your-topology&#34;&gt;Modifying your Topology&lt;/h3&gt;
&lt;p&gt;You can either use the GUI or edit the virtual machine&amp;rsquo;s configuration via virsh for this part.&lt;/p&gt;
&lt;p&gt;You want to ensure that the topology of your vCPUs are sensible, in my scenario I specified a topology of 1 socket, 4 cores, 2 threads for a total of 8 vCPUs.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using virsh, you want to amend your settings as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#8a8a8a;background-color:#1c1c1c;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;cpu&lt;/span&gt; mode=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;host-model&amp;#34;&lt;/span&gt; check=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;partial&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;topology&lt;/span&gt; sockets=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; dies=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; cores=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; threads=&lt;span style=&#34;color:#00afaf&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#0087ff&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#0087ff&#34;&gt;&amp;lt;/cpu&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;closing-thoughts&#34;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s a bit of a chore to set up VFIO, but I am very happy with my VM. I&amp;rsquo;ve been able to remove a lot of &amp;lsquo;hacky&amp;rsquo; applications which were installed on my Fedora install such as Citrix Receiver and install it on the VM.&lt;/p&gt;
&lt;p&gt;Games have run smoothly without a noticeable drop in performance.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t cover off audio in this post, for the reason that I was able to route it physically with an AUX cable straight to my speakers. The advantage of doing this was that I had less audio latency.&lt;/p&gt;
&lt;p&gt;If you aren&amp;rsquo;t able to do a similar set up, I recommend you read &lt;a href=&#34;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF#Passing_VM_audio_to_host_via_PulseAudio&#34;&gt;this article&lt;/a&gt; which describes the process of routing audio through pulseaudio.&lt;/p&gt;
&lt;p&gt;Alternatively, you can use &lt;a href=&#34;https://github.com/duncanthrax/scream&#34;&gt;scream&lt;/a&gt;. I haven&amp;rsquo;t messed around with this library but I&amp;rsquo;ve heard there are latency issues.&lt;/p&gt;
&lt;p&gt;Lastly&amp;hellip; I hope the article was useful and good luck!&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
